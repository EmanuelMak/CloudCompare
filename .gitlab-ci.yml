image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare:latest

variables:
  PATH_TO_AWS_LAMBDA: ./apps/backend/cammelCaseLambda
stages:
  - preinit
  - init
  - build
  - test
  - deploy
  - testDeploy

setVaultEnv:
  stage: init
  script:
    - vlt login
    - vlt config

testAWSCLI:
  stage: init
  script:
    - aws --version
    - vlt run --command="make -f Makefile.ci checkAwsLggedIn"

deployCamelCaseConverterMavenToRegistry:
  image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/jdkmvn:latest
  stage: build
  script:
    - cd ./src/camelCase
    - vlt run --command="make -f makefile.ci deployToGitlabPackageRegistry"

testVltVariables:
  stage: init
  script:
   - vlt secrets
   - make -f Makefile.ci test
   - vlt run --command="make -f Makefile.ci testEnvSecrets"

updateDockerImages:
  stage: preinit
  image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/docker:latest # use the image we just built
  services:
    - docker:dind
  script:
    - echo "This job runs only when files in $CI_PROJECT_DIR/pipeline/* are modified."
    - docker --version # Just to confirm Docker runs
    - vlt --version # Just to confirm VLT runs
    - cd ./pipeline
    - vlt run --command="make -f makefile.ci updateDockerImages"
  rules:
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - pipeline/**/*

buildAndPushToEcrSpringboot:
  stage: build
  image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/docker:latest # use the image we just built
  services:
    - docker:dind
  script:
    - cd apps/backend/springboot
    - vlt run --command="make -f makefile.ci createAwsEcrRepo"
    - vlt run --command="make -f makefile.ci pushImageToAwsEcrRepo"
  dependencies:
    - deployCamelCaseConverterMavenToRegistry
buildAndPushToDockerhubSpringboot:
  stage: build
  image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/docker:latest # use the image we just built
  services:
    - docker:dind
  script:
    - cd apps/backend/springboot
    - vlt run --command="make -f makefile.ci pushToDockerhub"
  dependencies:
    - deployCamelCaseConverterMavenToRegistry

# deploySringbootAppAwsBeanstalkEC2:
#   stage: deploy
#   image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/awseb:latest # use the image we just built
#   services:
#     - docker:dind
#   script:
#     - cd apps/backend/springboot
#     - mkdir -p ./.elasticbeanstalk
#     - mv -f ./config.yml ./.elasticbeanstalk/
#     - vlt run --command="make -f makefile.ci recreateAwsEbApp"
#   dependencies:
#     - buildAndPushToEcrSpringboot

# buildAzureFunction:
#   stage: build
#   image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/azure:latest
#   script:
#     - cd ./apps/backend/azure/function/camelcaseAzureFunc
#     - vlt run --command="make -f makefile.ci buildAzureFunction"

# deployAzureFunction:
#   stage: deploy
#   image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/azure:latest
#   script:
#     - cd ./apps/backend/azure/function/camelcaseAzureFunc
#     - vlt run --command="make -f makefile.ci azureLogin"
#     - vlt run --command="make -f makefile.ci deployAzureFunction"
buildAwsLambda:
  image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/jdkmvn:latest
  stage: build
  script:
    - echo "todo"

deployAwsLambda:
  image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/docker:latest
  stage: deploy
  script:
    - echo "todo"

testAwsLambda:
  image: inf-docker.fh-rosenheim.de/sinfemmakk/cloudcompare/docker:latest
  stage: preinit
  script:
    - cd $PATH_TO_AWS_LAMBDA
    - aws --version
    - aws configure list
    # - vlt run --command="make -f makefile.ci testAwsLambda"
    - echo "todo"