EC2_ROLE_NAME = Ec2RoleAdmin
CLUSTER_NAME = emanuelThesisEcsCluster
POLICY_1_ARN = arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
POLICY_2_ARN = arn:aws:iam::aws:policy/AdministratorAccess #should be removed later
POLICY_3_ARN = arn:aws:iam::aws:policy/CloudWatchFullAccess


ROLE_EXISTS := $(shell aws iam list-roles --query "Roles[?RoleName=='$(EC2_ROLE_NAME)'].RoleName" --output text)

createOrUpdateRolePolicy:
	-if [  "$(ROLE_EXISTS)" != "$(EC2_ROLE_NAME)" ]; then \
		aws iam create-role \
			--role-name $(EC2_ROLE_NAME) \
			--assume-role-policy-document file://ecsConfig/ecsInstanceRolePolicy.json; \
	fi
	-aws iam attach-role-policy --role-name "$(EC2_ROLE_NAME)" --policy-arn "$(POLICY_1_ARN)" || true
	-aws iam attach-role-policy --role-name "$(EC2_ROLE_NAME)" --policy-arn "$(POLICY_2_ARN)" || true
	-aws iam attach-role-policy --role-name "$(EC2_ROLE_NAME)" --policy-arn "$(POLICY_3_ARN)" || true
	-echo "Policies attached to role: $(EC2_ROLE_NAME)"
	-vlt secrets create AWS_ECS_IAM_Role_Name $(EC2_ROLE_NAME) || vlt secrets update AWS_ECS_IAM_Role_Name $(EC2_ROLE_NAME)
	-EC2_ROLE_ARN=$$(aws iam get-role --role-name "$(EC2_ROLE_NAME)" | jq -r '.Role.Arn') &&\
	echo "EC2_ROLE_ARN: $$EC2_ROLE_ARN" &&\
	vlt secrets create  AWS_ECS_IAM_Role_ARN $$EC2_ROLE_ARN || vlt secrets update AWS_ECS_IAM_Role_ARN $$EC2_ROLE_ARN

ecsCliConfigure:
	-export ECS_CLUSTER=$(CLUSTER_NAME) && \
	ecs-cli configure profile \
		--access-key=$$AWS_ACCESS_KEY_ID \
		--secret-key=$$AWS_SECRET_ACCESS_KEY && \
	ecs-cli up --force --instance-role $(EC2_ROLE_NAME) 
buildBasicTaskDefinitionFromDockerCompose:
	-ecs-cli compose --project-name camelCase up
editBasicTaskDefinition:
	-echo "todo"
deployBasicTaskDefinition:
	-ecs-cli compose --project-name <your-project-name> service up

generateTfVars:
	-cd ./ecsConfig && \
	chmod +x ./generateTfVars.sh && \
	./generateTfVars.sh